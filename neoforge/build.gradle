plugins {
    id("multiplatform-convention")

    alias(libs.plugins.moddevgradle)
    alias(libs.plugins.modpublish)
}

version = modVersion
var mcVersion = libs.versions.minecraft.asProvider().get()
base {
    archivesName = "${modName}-neoforge-${mcVersion}"
}

neoForge {
    version = libs.versions.neoforge.asProvider().get()

    validateAccessTransformers = true
    accessTransformers.files.setFrom(project(":common").file("src/main/resources/META-INF/accesstransformer-nf.cfg"))

    addModdingDependenciesTo(sourceSets.test)

    runs {
        configureEach {
            logLevel = org.slf4j.event.Level.DEBUG
        }

        mods.create("${modId}").sourceSet(project.sourceSets.getByName("main"))

        create("client") {
            client()
        }

        create("server") {
            server()
//            programArgument("--nogui")
        }
    }
}

dependencies {
    implementation(libs.neoforge)
    compileOnly(project(":common"))
}

tasks.named('test').configure {
    //Disable builtin test as we have JUnit enabled in Common
    enabled(false)
}

tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
}

tasks.withType(Javadoc).configureEach {
    source(project(":common").sourceSets.main.allJava)
}

tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.main.allSource)
}

tasks.withType(ProcessResources).configureEach {
    from project(":common").sourceSets.main.resources
}

task apiJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'api'

    include "hungteen/${modId}/api/**"

    // Sources included because of MinecraftForge/ForgeGradle#369
    from project(":common").sourceSets.main.allJava
    from(sourceSets.main.allJava)
    from(sourceSets.main.output)
}

artifacts {
    archives apiJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = modName
            version "${mcVersion}-${modVersion}-neoforge"
            from components.java
        }
    }
    repositories {
        mavenLocal()
    }
}